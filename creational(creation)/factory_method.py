# Factory Method Design Pattern
# Ce fichier contient une implÃ©mentation exemple du pattern.
"""
Factory Method Design Pattern

Objectif :
DÃ©finir une interface pour crÃ©er un objet, mais laisser les sous-classes dÃ©cider quelle classe instancier.

Utilisation :
- SystÃ¨mes de plugins
- CrÃ©ation dynamique d'objets selon un type

Avantages :
- Faible couplage entre la crÃ©ation et lâ€™utilisation
"""

"""
ðŸŽ¯ Cas dâ€™usage : CrÃ©ation dâ€™un transport selon le type (voiture, vÃ©lo, moto)
L'application ne connaÃ®t pas Ã  l'avance la classe concrÃ¨te Ã  instancier. 
On dÃ©lÃ¨gue la dÃ©cision Ã  une mÃ©thode create_transport() dans des sous-classes.
"""

from abc import ABC, abstractmethod

# ------------------------------
# Produit : interface Transport
# ------------------------------
class Transport(ABC):
    @abstractmethod
    def deliver(self):
        pass

# ------------------------------
# Produits concrets
# ------------------------------
class Car(Transport):
    def deliver(self):
        print("ðŸš— Livraison par voiture.")

class Bike(Transport):
    def deliver(self):
        print("ðŸš² Livraison par vÃ©lo.")

class Scooter(Transport):
    def deliver(self):
        print("ðŸ›µ Livraison par scooter.")

# ------------------------------
# Creator : classe de base
# ------------------------------
class Logistics(ABC):
    def plan_delivery(self):
        transport = self.create_transport()
        transport.deliver()

    @abstractmethod
    def create_transport(self) -> Transport:
        pass

# ------------------------------
# CrÃ©ateurs concrets
# ------------------------------
class RoadLogistics(Logistics):
    def create_transport(self) -> Transport:
        return Car()

class BikeLogistics(Logistics):
    def create_transport(self) -> Transport:
        return Bike()

class UrbanLogistics(Logistics):
    def create_transport(self) -> Transport:
        return Scooter()

# ------------------------------
# Utilisation
# ------------------------------
if __name__ == "__main__":
    choice = input("Choisir un mode de transport (car, bike, scooter): ").strip().lower()

    if choice == "bike":
        logistics = BikeLogistics()
    elif choice == "scooter":
        logistics = UrbanLogistics()
    else:
        logistics = RoadLogistics()

    logistics.plan_delivery()
