# Abstract Factory Design Pattern
# Ce fichier contient une impl√©mentation exemple du pattern.

"""
Abstract Factory Design Pattern

Objectif :
Fournir une interface pour cr√©er des familles d'objets li√©s ou d√©pendants sans sp√©cifier leur classe concr√®te.

Utilisation :
- Interface utilisateur multi-th√®mes
- Syst√®mes multiplateformes (Windows/Mac/Linux)

Avantages :
- Coh√©rence entre les objets cr√©√©s
- Encapsulation des d√©tails de cr√©ation
"""

"""
üéØ Cas d‚Äôusage : Interface graphique multi-th√®me (Light / Dark)
On veut cr√©er une interface compos√©e de boutons et de checkboxes.
Selon le th√®me (Light ou Dark), on instancie la famille d‚Äôobjets correspondante.
"""

from abc import ABC, abstractmethod

# ------------------------------
# Interfaces des produits
# ------------------------------
class Button(ABC):
    @abstractmethod
    def render(self): pass

class Checkbox(ABC):
    @abstractmethod
    def render(self): pass

# ------------------------------
# Produits Concrets ‚Äì Th√®me Light
# ------------------------------
class LightButton(Button):
    def render(self):
        print("üü¶ Bouton Light")

class LightCheckbox(Checkbox):
    def render(self):
        print("‚¨úÔ∏è Checkbox Light")

# ------------------------------
# Produits Concrets ‚Äì Th√®me Dark
# ------------------------------
class DarkButton(Button):
    def render(self):
        print("‚¨õ Bouton Dark")

class DarkCheckbox(Checkbox):
    def render(self):
        print("üü• Checkbox Dark")

# ------------------------------
# Interface de la Factory Abstraite
# ------------------------------
class GUIFactory(ABC):
    @abstractmethod
    def create_button(self) -> Button: pass

    @abstractmethod
    def create_checkbox(self) -> Checkbox: pass

# ------------------------------
# Factories concr√®tes
# ------------------------------
class LightThemeFactory(GUIFactory):
    def create_button(self):
        return LightButton()

    def create_checkbox(self):
        return LightCheckbox()

class DarkThemeFactory(GUIFactory):
    def create_button(self):
        return DarkButton()

    def create_checkbox(self):
        return DarkCheckbox()

# ------------------------------
# Application qui utilise la factory
# ------------------------------
class Application:
    def __init__(self, factory: GUIFactory):
        self.button = factory.create_button()
        self.checkbox = factory.create_checkbox()

    def render(self):
        self.button.render()
        self.checkbox.render()

# ------------------------------
# Utilisation
# ------------------------------
if __name__ == "__main__":
    theme = input("Choisissez un th√®me (light/dark) : ").strip().lower()

    if theme == "dark":
        factory = DarkThemeFactory()
    else:
        factory = LightThemeFactory()

    app = Application(factory)
    app.render()
