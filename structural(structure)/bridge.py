# Bridge Design Pattern
# Ce fichier contient une implÃ©mentation exemple du pattern.
"""
Bridge Design Pattern

Objectif :
SÃ©parer l'abstraction d'une classe de son implÃ©mentation pour qu'elles puissent Ã©voluer indÃ©pendamment.

Utilisation :
- UI avec plusieurs moteurs de rendu
- SystÃ¨mes multi-plateformes

Avantages :
- FlexibilitÃ©
- Extension indÃ©pendante

"""

"""
ðŸŽ¯ Cas dâ€™usage : UI multi-moteur de rendu (console / HTML)
On a une abstraction UIComponent (bouton, alerte, etc.) qui peut Ãªtre rendue diffÃ©remment selon le moteur (ConsoleRenderer, HtmlRenderer).
Le Bridge permet de sÃ©parer le "quoi" (abstraction) du "comment" (implÃ©mentation).
"""

from abc import ABC, abstractmethod

# ------------------------------
# ImplÃ©mentation : interface de rendu
# ------------------------------
class Renderer(ABC):
    @abstractmethod
    def render_button(self, label: str):
        pass

# ------------------------------
# ImplÃ©mentations concrÃ¨tes
# ------------------------------
class ConsoleRenderer(Renderer):
    def render_button(self, label: str):
        print(f"[Console] >>> [ {label} ]")

class HtmlRenderer(Renderer):
    def render_button(self, label: str):
        print(f"[HTML] <button>{label}</button>")

# ------------------------------
# Abstraction : UIComponent
# ------------------------------
class UIComponent(ABC):
    def __init__(self, renderer: Renderer):
        self.renderer = renderer

    @abstractmethod
    def render(self):
        pass

# ------------------------------
# Abstraction Ã©tendue : bouton
# ------------------------------
class Button(UIComponent):
    def __init__(self, label: str, renderer: Renderer):
        super().__init__(renderer)
        self.label = label

    def render(self):
        self.renderer.render_button(self.label)

# ------------------------------
# Utilisation
# ------------------------------
if __name__ == "__main__":
    print("=== Rendu console ===")
    console_button = Button("Valider", ConsoleRenderer())
    console_button.render()

    print("\n=== Rendu HTML ===")
    html_button = Button("Envoyer", HtmlRenderer())
    html_button.render()
