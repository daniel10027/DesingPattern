# Command Design Pattern
# Ce fichier contient une impl√©mentation exemple du pattern.

"""
Command Design Pattern

Objectif :
Encapsuler une requ√™te sous forme d'objet, permettant de param√©trer des actions.

Utilisation :
- Syst√®me undo/redo
- Planification de t√¢ches

Avantages :
- Historique d‚Äôactions
- Flexibilit√© dans l'ex√©cution
"""

"""
üéØ Cas d‚Äôusage : T√©l√©commande programmable
On a une t√©l√©commande qui peut :

Allumer une lumi√®re

√âteindre une lumi√®re

Chaque action est encapsul√©e dans une commande (Command), et la t√©l√©commande peut ex√©cuter ou annuler l‚Äôaction (undo).
"""

from abc import ABC, abstractmethod

# ------------------------------
# Command Interface
# ------------------------------
class Command(ABC):
    @abstractmethod
    def execute(self):
        pass

    @abstractmethod
    def undo(self):
        pass

# ------------------------------
# Receiver (Lumi√®re)
# ------------------------------
class Light:
    def turn_on(self):
        print("üí° Lumi√®re allum√©e")

    def turn_off(self):
        print("üí§ Lumi√®re √©teinte")

# ------------------------------
# Commandes concr√®tes
# ------------------------------
class LightOnCommand(Command):
    def __init__(self, light: Light):
        self.light = light

    def execute(self):
        self.light.turn_on()

    def undo(self):
        self.light.turn_off()

class LightOffCommand(Command):
    def __init__(self, light: Light):
        self.light = light

    def execute(self):
        self.light.turn_off()

    def undo(self):
        self.light.turn_on()

# ------------------------------
# Invoker (T√©l√©commande)
# ------------------------------
class RemoteControl:
    def __init__(self):
        self.command_history = []

    def submit(self, command: Command):
        command.execute()
        self.command_history.append(command)

    def undo_last(self):
        if self.command_history:
            command = self.command_history.pop()
            print("‚Ü©Ô∏è Annulation :")
            command.undo()
        else:
            print("‚ùå Rien √† annuler.")

# ------------------------------
# Utilisation
# ------------------------------
if __name__ == "__main__":
    light = Light()
    turn_on = LightOnCommand(light)
    turn_off = LightOffCommand(light)

    remote = RemoteControl()

    # Allumer la lumi√®re
    remote.submit(turn_on)
    # √âteindre la lumi√®re
    remote.submit(turn_off)
    # Annuler la derni√®re action (√©teindre ‚Üí allumer)
    remote.undo_last()
