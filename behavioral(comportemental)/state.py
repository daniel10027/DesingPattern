# State Design Pattern
# Ce fichier contient une impl√©mentation exemple du pattern.
"""
State Design Pattern

Objectif :
Permettre √† un objet de changer son comportement en fonction de son √©tat interne.

Utilisation :
- Machines √† √©tats
- Syst√®mes de navigation

Avantages :
- Organisation claire
- Ajout d'√©tats sans modifier l'objet principal
"""

"""
üéØ Cas d‚Äôusage : Machine √† boisson
Une machine passe par plusieurs √©tats :

- Attente d‚Äôune pi√®ce

- Pr√™te √† d√©livrer une boisson

- En train de servir

Le comportement change selon l‚Äô√©tat.
"""

from abc import ABC, abstractmethod

# ------------------------------
# Contexte : Machine √† boisson
# ------------------------------
class VendingMachine:
    def __init__(self):
        self.state = WaitingForCoinState()

    def set_state(self, state):
        self.state = state

    def insert_coin(self):
        self.state.insert_coin(self)

    def select_product(self):
        self.state.select_product(self)

# ------------------------------
# Interface d‚Äô√©tat
# ------------------------------
class State(ABC):
    @abstractmethod
    def insert_coin(self, context):
        pass

    @abstractmethod
    def select_product(self, context):
        pass

# ------------------------------
# √âtats concrets
# ------------------------------
class WaitingForCoinState(State):
    def insert_coin(self, context):
        print("ü™ô Pi√®ce ins√©r√©e.")
        context.set_state(ProductSelectionState())

    def select_product(self, context):
        print("‚ùå Veuillez d'abord ins√©rer une pi√®ce.")

class ProductSelectionState(State):
    def insert_coin(self, context):
        print("‚ùå Pi√®ce d√©j√† ins√©r√©e.")

    def select_product(self, context):
        print("ü•§ Produit s√©lectionn√©. Distribution en cours...")
        context.set_state(WaitingForCoinState())

# ------------------------------
# Utilisation
# ------------------------------
if __name__ == "__main__":
    machine = VendingMachine()

    machine.select_product()    # ‚ùå Pas encore de pi√®ce
    machine.insert_coin()       # ‚úÖ Pi√®ce ins√©r√©e
    machine.insert_coin()       # ‚ùå D√©j√† ins√©r√©
    machine.select_product()    # ‚úÖ Produit distribu√©
    machine.select_product()    # ‚ùå Revenir √† √©tat initial
